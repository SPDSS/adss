/*******************************************************************************
 * Copyright (c) 2016 Politecnico di Torino.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Politecnico di Torino - initial API and implementation
 *******************************************************************************/
/**
 * generated by Xtext 2.10.0
 */
package eu.aspire_fp7.adss.rulesLanguage;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Parameter Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see eu.aspire_fp7.adss.rulesLanguage.RulesLanguagePackage#getParameterType()
 * @model
 * @generated
 */
public enum ParameterType implements Enumerator
{
  /**
   * The '<em><b>IGNORE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IGNORE_VALUE
   * @generated
   * @ordered
   */
  IGNORE(0, "IGNORE", "_"),

  /**
   * The '<em><b>CRYPTOGRAPHIC KEY</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CRYPTOGRAPHIC_KEY_VALUE
   * @generated
   * @ordered
   */
  CRYPTOGRAPHIC_KEY(1, "CRYPTOGRAPHIC_KEY", "cryptographicKey"),

  /**
   * The '<em><b>INITIALIZATION VECTOR</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INITIALIZATION_VECTOR_VALUE
   * @generated
   * @ordered
   */
  INITIALIZATION_VECTOR(2, "INITIALIZATION_VECTOR", "initializationVector"),

  /**
   * The '<em><b>PLAINTEXT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PLAINTEXT_VALUE
   * @generated
   * @ordered
   */
  PLAINTEXT(3, "PLAINTEXT", "plaintext"),

  /**
   * The '<em><b>CIPHERTEXT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CIPHERTEXT_VALUE
   * @generated
   * @ordered
   */
  CIPHERTEXT(4, "CIPHERTEXT", "ciphertext");

  /**
   * The '<em><b>IGNORE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>IGNORE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #IGNORE
   * @model literal="_"
   * @generated
   * @ordered
   */
  public static final int IGNORE_VALUE = 0;

  /**
   * The '<em><b>CRYPTOGRAPHIC KEY</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>CRYPTOGRAPHIC KEY</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CRYPTOGRAPHIC_KEY
   * @model literal="cryptographicKey"
   * @generated
   * @ordered
   */
  public static final int CRYPTOGRAPHIC_KEY_VALUE = 1;

  /**
   * The '<em><b>INITIALIZATION VECTOR</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INITIALIZATION VECTOR</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INITIALIZATION_VECTOR
   * @model literal="initializationVector"
   * @generated
   * @ordered
   */
  public static final int INITIALIZATION_VECTOR_VALUE = 2;

  /**
   * The '<em><b>PLAINTEXT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>PLAINTEXT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #PLAINTEXT
   * @model literal="plaintext"
   * @generated
   * @ordered
   */
  public static final int PLAINTEXT_VALUE = 3;

  /**
   * The '<em><b>CIPHERTEXT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>CIPHERTEXT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CIPHERTEXT
   * @model literal="ciphertext"
   * @generated
   * @ordered
   */
  public static final int CIPHERTEXT_VALUE = 4;

  /**
   * An array of all the '<em><b>Parameter Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final ParameterType[] VALUES_ARRAY =
    new ParameterType[]
    {
      IGNORE,
      CRYPTOGRAPHIC_KEY,
      INITIALIZATION_VECTOR,
      PLAINTEXT,
      CIPHERTEXT,
    };

  /**
   * A public read-only list of all the '<em><b>Parameter Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<ParameterType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Parameter Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ParameterType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ParameterType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Parameter Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ParameterType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ParameterType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Parameter Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ParameterType get(int value)
  {
    switch (value)
    {
      case IGNORE_VALUE: return IGNORE;
      case CRYPTOGRAPHIC_KEY_VALUE: return CRYPTOGRAPHIC_KEY;
      case INITIALIZATION_VECTOR_VALUE: return INITIALIZATION_VECTOR;
      case PLAINTEXT_VALUE: return PLAINTEXT;
      case CIPHERTEXT_VALUE: return CIPHERTEXT;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private ParameterType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //ParameterType

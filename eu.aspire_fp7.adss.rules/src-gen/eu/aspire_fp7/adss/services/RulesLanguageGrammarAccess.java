/*******************************************************************************
 * Copyright (c) 2016 Politecnico di Torino.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Politecnico di Torino - initial API and implementation
 *******************************************************************************/
/*
 * generated by Xtext 2.10.0
 */
package eu.aspire_fp7.adss.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RulesLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.aspire_fp7.adss.RulesLanguage.Model");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//Model:
		//	rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment() { return cRulesAssignment; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_0() { return cRulesRuleParserRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.aspire_fp7.adss.RulesLanguage.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsConditionParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_3_1_0 = (RuleCall)cConditionsAssignment_3_1.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionActionEnumRuleCall_5_0 = (RuleCall)cActionAssignment_5.eContents().get(0);
		
		//Rule:
		//	(name=ID ":")? "if" conditions+=Condition ("," conditions+=Condition)* "then" action=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//(name=ID ":")? "if" conditions+=Condition ("," conditions+=Condition)* "then" action=Action
		public Group getGroup() { return cGroup; }
		
		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_0() { return cConditionsConditionParserRuleCall_2_0; }
		
		//("," conditions+=Condition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_3_1_0() { return cConditionsConditionParserRuleCall_3_1_0; }
		
		//"then"
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//action=Action
		public Assignment getActionAssignment_5() { return cActionAssignment_5; }
		
		//Action
		public RuleCall getActionActionEnumRuleCall_5_0() { return cActionActionEnumRuleCall_5_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.aspire_fp7.adss.RulesLanguage.Condition");
		private final RuleCall cFunctionDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	FunctionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall() { return cFunctionDeclarationParserRuleCall; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eu.aspire_fp7.adss.RulesLanguage.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterTypeEnumRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersParameterTypeEnumRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionDeclaration:
		//	name=ID "(" parameters+=ParameterType? ("," parameters+=ParameterType)* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID "(" parameters+=ParameterType? ("," parameters+=ParameterType)* ")"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters+=ParameterType?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterType
		public RuleCall getParametersParameterTypeEnumRuleCall_2_0() { return cParametersParameterTypeEnumRuleCall_2_0; }
		
		//("," parameters+=ParameterType)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//parameters+=ParameterType
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//ParameterType
		public RuleCall getParametersParameterTypeEnumRuleCall_3_1_0() { return cParametersParameterTypeEnumRuleCall_3_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	
	public class ParameterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.aspire_fp7.adss.RulesLanguage.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIGNOREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIGNORE_Keyword_0_0 = (Keyword)cIGNOREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCRYPTOGRAPHIC_KEYCryptographicKeyKeyword_1_0 = (Keyword)cCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINITIALIZATION_VECTOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINITIALIZATION_VECTORInitializationVectorKeyword_2_0 = (Keyword)cINITIALIZATION_VECTOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPLAINTEXTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPLAINTEXTPlaintextKeyword_3_0 = (Keyword)cPLAINTEXTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCIPHERTEXTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCIPHERTEXTCiphertextKeyword_4_0 = (Keyword)cCIPHERTEXTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ParameterType:
		//	IGNORE="_" |
		//	CRYPTOGRAPHIC_KEY="cryptographicKey" |
		//	INITIALIZATION_VECTOR="initializationVector" |
		//	PLAINTEXT="plaintext" |
		//	CIPHERTEXT="ciphertext";
		public EnumRule getRule() { return rule; }
		
		//IGNORE="_" | CRYPTOGRAPHIC_KEY="cryptographicKey" | INITIALIZATION_VECTOR="initializationVector" | PLAINTEXT="plaintext"
		//| CIPHERTEXT="ciphertext"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IGNORE="_"
		public EnumLiteralDeclaration getIGNOREEnumLiteralDeclaration_0() { return cIGNOREEnumLiteralDeclaration_0; }
		
		//"_"
		public Keyword getIGNORE_Keyword_0_0() { return cIGNORE_Keyword_0_0; }
		
		//CRYPTOGRAPHIC_KEY="cryptographicKey"
		public EnumLiteralDeclaration getCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1() { return cCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1; }
		
		//"cryptographicKey"
		public Keyword getCRYPTOGRAPHIC_KEYCryptographicKeyKeyword_1_0() { return cCRYPTOGRAPHIC_KEYCryptographicKeyKeyword_1_0; }
		
		//INITIALIZATION_VECTOR="initializationVector"
		public EnumLiteralDeclaration getINITIALIZATION_VECTOREnumLiteralDeclaration_2() { return cINITIALIZATION_VECTOREnumLiteralDeclaration_2; }
		
		//"initializationVector"
		public Keyword getINITIALIZATION_VECTORInitializationVectorKeyword_2_0() { return cINITIALIZATION_VECTORInitializationVectorKeyword_2_0; }
		
		//PLAINTEXT="plaintext"
		public EnumLiteralDeclaration getPLAINTEXTEnumLiteralDeclaration_3() { return cPLAINTEXTEnumLiteralDeclaration_3; }
		
		//"plaintext"
		public Keyword getPLAINTEXTPlaintextKeyword_3_0() { return cPLAINTEXTPlaintextKeyword_3_0; }
		
		//CIPHERTEXT="ciphertext"
		public EnumLiteralDeclaration getCIPHERTEXTEnumLiteralDeclaration_4() { return cCIPHERTEXTEnumLiteralDeclaration_4; }
		
		//"ciphertext"
		public Keyword getCIPHERTEXTCiphertextKeyword_4_0() { return cCIPHERTEXTCiphertextKeyword_4_0; }
	}
	public class ActionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "eu.aspire_fp7.adss.RulesLanguage.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDECRYPT_AES128_CBCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDECRYPT_AES128_CBCDecryptAES128CBCKeyword_0_0 = (Keyword)cDECRYPT_AES128_CBCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECRYPT_AES128_ECBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECRYPT_AES128_ECBDecryptAES128ECBKeyword_1_0 = (Keyword)cDECRYPT_AES128_ECBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cENCRYPT_AES128_CBCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cENCRYPT_AES128_CBCEncryptAES128CBCKeyword_2_0 = (Keyword)cENCRYPT_AES128_CBCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cENCRYPT_AES128_ECBEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cENCRYPT_AES128_ECBEncryptAES128ECBKeyword_3_0 = (Keyword)cENCRYPT_AES128_ECBEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Action:
		//	DECRYPT_AES128_CBC="decrypt:AES128-CBC" |
		//	DECRYPT_AES128_ECB="decrypt:AES128-ECB" |
		//	ENCRYPT_AES128_CBC="encrypt:AES128-CBC" |
		//	ENCRYPT_AES128_ECB="encrypt:AES128-ECB";
		public EnumRule getRule() { return rule; }
		
		//DECRYPT_AES128_CBC="decrypt:AES128-CBC" | DECRYPT_AES128_ECB="decrypt:AES128-ECB" |
		//ENCRYPT_AES128_CBC="encrypt:AES128-CBC" | ENCRYPT_AES128_ECB="encrypt:AES128-ECB"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECRYPT_AES128_CBC="decrypt:AES128-CBC"
		public EnumLiteralDeclaration getDECRYPT_AES128_CBCEnumLiteralDeclaration_0() { return cDECRYPT_AES128_CBCEnumLiteralDeclaration_0; }
		
		//"decrypt:AES128-CBC"
		public Keyword getDECRYPT_AES128_CBCDecryptAES128CBCKeyword_0_0() { return cDECRYPT_AES128_CBCDecryptAES128CBCKeyword_0_0; }
		
		//DECRYPT_AES128_ECB="decrypt:AES128-ECB"
		public EnumLiteralDeclaration getDECRYPT_AES128_ECBEnumLiteralDeclaration_1() { return cDECRYPT_AES128_ECBEnumLiteralDeclaration_1; }
		
		//"decrypt:AES128-ECB"
		public Keyword getDECRYPT_AES128_ECBDecryptAES128ECBKeyword_1_0() { return cDECRYPT_AES128_ECBDecryptAES128ECBKeyword_1_0; }
		
		//ENCRYPT_AES128_CBC="encrypt:AES128-CBC"
		public EnumLiteralDeclaration getENCRYPT_AES128_CBCEnumLiteralDeclaration_2() { return cENCRYPT_AES128_CBCEnumLiteralDeclaration_2; }
		
		//"encrypt:AES128-CBC"
		public Keyword getENCRYPT_AES128_CBCEncryptAES128CBCKeyword_2_0() { return cENCRYPT_AES128_CBCEncryptAES128CBCKeyword_2_0; }
		
		//ENCRYPT_AES128_ECB="encrypt:AES128-ECB"
		public EnumLiteralDeclaration getENCRYPT_AES128_ECBEnumLiteralDeclaration_3() { return cENCRYPT_AES128_ECBEnumLiteralDeclaration_3; }
		
		//"encrypt:AES128-ECB"
		public Keyword getENCRYPT_AES128_ECBEncryptAES128ECBKeyword_3_0() { return cENCRYPT_AES128_ECBEncryptAES128ECBKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final RuleElements pRule;
	private final ConditionElements pCondition;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ParameterTypeElements eParameterType;
	private final ActionElements eAction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RulesLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRule = new RuleElements();
		this.pCondition = new ConditionElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.eParameterType = new ParameterTypeElements();
		this.eAction = new ActionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.aspire_fp7.adss.RulesLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rules+=Rule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Rule:
	//	(name=ID ":")? "if" conditions+=Condition ("," conditions+=Condition)* "then" action=Action;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Condition:
	//	FunctionDeclaration;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//FunctionDeclaration:
	//	name=ID "(" parameters+=ParameterType? ("," parameters+=ParameterType)* ")";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//enum ParameterType:
	//	IGNORE="_" |
	//	CRYPTOGRAPHIC_KEY="cryptographicKey" |
	//	INITIALIZATION_VECTOR="initializationVector" |
	//	PLAINTEXT="plaintext" |
	//	CIPHERTEXT="ciphertext";
	public ParameterTypeElements getParameterTypeAccess() {
		return eParameterType;
	}
	
	public EnumRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//enum Action:
	//	DECRYPT_AES128_CBC="decrypt:AES128-CBC" |
	//	DECRYPT_AES128_ECB="decrypt:AES128-ECB" |
	//	ENCRYPT_AES128_CBC="encrypt:AES128-CBC" |
	//	ENCRYPT_AES128_ECB="encrypt:AES128-ECB";
	public ActionElements getActionAccess() {
		return eAction;
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

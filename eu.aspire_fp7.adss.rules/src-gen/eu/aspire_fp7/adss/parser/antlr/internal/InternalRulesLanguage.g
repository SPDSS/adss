/*
 * generated by Xtext 2.10.0
 */
grammar InternalRulesLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package eu.aspire_fp7.adss.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.aspire_fp7.adss.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.aspire_fp7.adss.services.RulesLanguageGrammarAccess;

}

@parser::members {

 	private RulesLanguageGrammarAccess grammarAccess;

    public InternalRulesLanguageParser(TokenStream input, RulesLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected RulesLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0());
			}
			lv_rules_0_0=ruleRule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"rules",
					lv_rules_0_0,
					"eu.aspire_fp7.adss.RulesLanguage.Rule");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRuleRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getColonKeyword_0_1());
			}
		)?
		otherlv_2='if'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_2_0());
				}
				lv_conditions_3_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_3_0,
						"eu.aspire_fp7.adss.RulesLanguage.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_3_1_0());
					}
					lv_conditions_5_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_5_0,
							"eu.aspire_fp7.adss.RulesLanguage.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='then'
		{
			newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getThenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getActionActionEnumRuleCall_5_0());
				}
				lv_action_7_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"action",
						lv_action_7_0,
						"eu.aspire_fp7.adss.RulesLanguage.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConditionAccess().getFunctionDeclarationParserRuleCall());
	}
	this_FunctionDeclaration_0=ruleFunctionDeclaration
	{
		$current = $this_FunctionDeclaration_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	iv_ruleFunctionDeclaration=ruleFunctionDeclaration
	{ $current=$iv_ruleFunctionDeclaration.current; }
	EOF;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersParameterTypeEnumRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_2_0,
						"eu.aspire_fp7.adss.RulesLanguage.ParameterType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersParameterTypeEnumRuleCall_3_1_0());
					}
					lv_parameters_4_0=ruleParameterType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_4_0,
							"eu.aspire_fp7.adss.RulesLanguage.ParameterType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Rule ParameterType
ruleParameterType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='_'
			{
				$current = grammarAccess.getParameterTypeAccess().getIGNOREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getParameterTypeAccess().getIGNOREEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='cryptographicKey'
			{
				$current = grammarAccess.getParameterTypeAccess().getCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getParameterTypeAccess().getCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='initializationVector'
			{
				$current = grammarAccess.getParameterTypeAccess().getINITIALIZATION_VECTOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getParameterTypeAccess().getINITIALIZATION_VECTOREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='plaintext'
			{
				$current = grammarAccess.getParameterTypeAccess().getPLAINTEXTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getParameterTypeAccess().getPLAINTEXTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='ciphertext'
			{
				$current = grammarAccess.getParameterTypeAccess().getCIPHERTEXTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getParameterTypeAccess().getCIPHERTEXTEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Action
ruleAction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='decrypt:AES128-CBC'
			{
				$current = grammarAccess.getActionAccess().getDECRYPT_AES128_CBCEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionAccess().getDECRYPT_AES128_CBCEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='decrypt:AES128-ECB'
			{
				$current = grammarAccess.getActionAccess().getDECRYPT_AES128_ECBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionAccess().getDECRYPT_AES128_ECBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='encrypt:AES128-CBC'
			{
				$current = grammarAccess.getActionAccess().getENCRYPT_AES128_CBCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionAccess().getENCRYPT_AES128_CBCEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='encrypt:AES128-ECB'
			{
				$current = grammarAccess.getActionAccess().getENCRYPT_AES128_ECBEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getActionAccess().getENCRYPT_AES128_ECBEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

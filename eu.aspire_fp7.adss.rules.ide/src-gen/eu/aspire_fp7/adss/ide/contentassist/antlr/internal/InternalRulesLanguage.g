/*
 * generated by Xtext 2.10.0
 */
grammar InternalRulesLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package eu.aspire_fp7.adss.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package eu.aspire_fp7.adss.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import eu.aspire_fp7.adss.services.RulesLanguageGrammarAccess;

}
@parser::members {
	private RulesLanguageGrammarAccess grammarAccess;

	public void setGrammarAccess(RulesLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getRulesAssignment()); }
		(rule__Model__RulesAssignment)*
		{ after(grammarAccess.getModelAccess().getRulesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getFunctionDeclarationParserRuleCall()); }
		ruleFunctionDeclaration
		{ after(grammarAccess.getConditionAccess().getFunctionDeclarationParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
		(rule__FunctionDeclaration__Group__0)
		{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ParameterType
ruleParameterType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterTypeAccess().getAlternatives()); }
		(rule__ParameterType__Alternatives)
		{ after(grammarAccess.getParameterTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Action
ruleAction
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterTypeAccess().getIGNOREEnumLiteralDeclaration_0()); }
		('_')
		{ after(grammarAccess.getParameterTypeAccess().getIGNOREEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterTypeAccess().getCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1()); }
		('cryptographicKey')
		{ after(grammarAccess.getParameterTypeAccess().getCRYPTOGRAPHIC_KEYEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getParameterTypeAccess().getINITIALIZATION_VECTOREnumLiteralDeclaration_2()); }
		('initializationVector')
		{ after(grammarAccess.getParameterTypeAccess().getINITIALIZATION_VECTOREnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getParameterTypeAccess().getPLAINTEXTEnumLiteralDeclaration_3()); }
		('plaintext')
		{ after(grammarAccess.getParameterTypeAccess().getPLAINTEXTEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getParameterTypeAccess().getCIPHERTEXTEnumLiteralDeclaration_4()); }
		('ciphertext')
		{ after(grammarAccess.getParameterTypeAccess().getCIPHERTEXTEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getDECRYPT_AES128_CBCEnumLiteralDeclaration_0()); }
		('decrypt:AES128-CBC')
		{ after(grammarAccess.getActionAccess().getDECRYPT_AES128_CBCEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getDECRYPT_AES128_ECBEnumLiteralDeclaration_1()); }
		('decrypt:AES128-ECB')
		{ after(grammarAccess.getActionAccess().getDECRYPT_AES128_ECBEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getENCRYPT_AES128_CBCEnumLiteralDeclaration_2()); }
		('encrypt:AES128-CBC')
		{ after(grammarAccess.getActionAccess().getENCRYPT_AES128_CBCEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getENCRYPT_AES128_ECBEnumLiteralDeclaration_3()); }
		('encrypt:AES128-ECB')
		{ after(grammarAccess.getActionAccess().getENCRYPT_AES128_ECBEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getGroup_0()); }
	(rule__Rule__Group_0__0)?
	{ after(grammarAccess.getRuleAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getRuleAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionsAssignment_2()); }
	(rule__Rule__ConditionsAssignment_2)
	{ after(grammarAccess.getRuleAccess().getConditionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getGroup_3()); }
	(rule__Rule__Group_3__0)*
	{ after(grammarAccess.getRuleAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getThenKeyword_4()); }
	'then'
	{ after(grammarAccess.getRuleAccess().getThenKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getActionAssignment_5()); }
	(rule__Rule__ActionAssignment_5)
	{ after(grammarAccess.getRuleAccess().getActionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_0__0__Impl
	rule__Rule__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getNameAssignment_0_0()); }
	(rule__Rule__NameAssignment_0_0)
	{ after(grammarAccess.getRuleAccess().getNameAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getColonKeyword_0_1()); }
	':'
	{ after(grammarAccess.getRuleAccess().getColonKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_3__0__Impl
	rule__Rule__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getRuleAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionsAssignment_3_1()); }
	(rule__Rule__ConditionsAssignment_3_1)
	{ after(grammarAccess.getRuleAccess().getConditionsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_0()); }
	(rule__FunctionDeclaration__NameAssignment_0)
	{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2()); }
	(rule__FunctionDeclaration__ParametersAssignment_2)?
	{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_3()); }
	(rule__FunctionDeclaration__Group_3__0)*
	{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group_3__0__Impl
	rule__FunctionDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_3_0()); }
	','
	{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_3_1()); }
	(rule__FunctionDeclaration__ParametersAssignment_3_1)
	{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__RulesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); }
		ruleRule
		{ after(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_2_0()); }
		ruleCondition
		{ after(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_3_1_0()); }
		ruleCondition
		{ after(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ActionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getActionActionEnumRuleCall_5_0()); }
		ruleAction
		{ after(grammarAccess.getRuleAccess().getActionActionEnumRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getParametersParameterTypeEnumRuleCall_2_0()); }
		ruleParameterType
		{ after(grammarAccess.getFunctionDeclarationAccess().getParametersParameterTypeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclarationAccess().getParametersParameterTypeEnumRuleCall_3_1_0()); }
		ruleParameterType
		{ after(grammarAccess.getFunctionDeclarationAccess().getParametersParameterTypeEnumRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
